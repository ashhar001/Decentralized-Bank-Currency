{"version":3,"sources":["dbank.png","components/Navbar.js","components/Header.js","components/Deposit.js","components/Withdraw.js","components/AccountDetails.js","components/BankDetails.js","components/Borrow.js","components/Payoff.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","rel","src","dbank","alt","height","Component","Header","this","props","account","Deposit","handleSubmit","e","preventDefault","amount","depositAmount","value","deposit","a","web3","Web3","window","ethereum","methods","send","toString","from","setState","dAmount","utils","fromWei","console","log","onSubmit","id","step","type","placeholder","required","ref","input","Withdraw","withdraw","onClick","AccountDetails","tokenBalance","BankDetails","dBankName","dBankAddress","tokenName","dBankTotalDepositedAmount","totalSupply","Borrow","borrowAmount","borrow","Payoff","collateralEther","call","tokenBorrowed","token","approve","payOff","App","state","balance","loadBlockchainData","dispatch","eth","net","getId","netId","getAccounts","accounts","getBalance","alert","Contract","Token","abi","networks","address","dBank","balanceOf","role","Tabs","defaultActiveKey","Tab","eventKey","title","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80bc07a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dbank.adca41d3.png\";","import React, { Component } from 'react';\r\nimport dbank from '../dbank.png';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"#\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <img src={dbank} alt=\"logo\" height=\"32\" />\r\n            <b>dBank</b>\r\n          </a>\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welocome to the Decentralized Bank</h1>\r\n                <h2>{this.props.account}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\n// import { Tabs, Tab } from 'react-bootstrap';\r\nimport Web3 from 'web3'\r\n\r\nclass Deposit extends Component {\r\n  async deposit(amount) {\r\n    const web3 = new Web3(window.ethereum)\r\n    if (this.props.dbank !== 'undefined') {\r\n      try {\r\n        await this.props.dbank.methods\r\n          .deposit()\r\n          .send({ value: amount.toString(), from: this.props.account })\r\n\r\n        // const dAmount = dbank.etherBalanceOf().call();\r\n        this.setState({\r\n          dAmount: web3.utils.fromWei(amount.toString()),\r\n        })\r\n      } catch (e) {\r\n        console.log('Error, deposit: ', e)\r\n      }\r\n    }\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let amount = this.depositAmount.value;\r\n\r\n    amount = amount * 10 ** 18 //convert to Wei\r\n    this.deposit(amount)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        How much you want to deposit?\r\n        <br />\r\n        (min. amount is 0.01 ETH)\r\n        <br />\r\n        (1 deposit is possible at a time)\r\n        <br />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group mr-sm-2\">\r\n            <br />\r\n            <input\r\n              id=\"depositAmount\"\r\n              step=\"0.01\"\r\n              type=\"number\"\r\n              className=\"form-control form-control-md\"\r\n              placeholder=\"amount...\"\r\n              required\r\n              ref={(input) => {\r\n                this.depositAmount = input\r\n              }}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Deposit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Deposit\r\n","import React, { Component } from 'react'\r\n\r\nclass Withdraw extends Component {\r\n  async withdraw(e) {\r\n    e.preventDefault()\r\n    if (this.props.dbank !== 'undefined') {\r\n      try {\r\n        await this.props.dbank.methods\r\n          .withdraw()\r\n          .send({ from: this.props.account })\r\n      } catch (e) {\r\n        console.log('Error, withdraw: ', e)\r\n      }\r\n    }\r\n    //prevent button from default click\r\n    //check if this.state.dbank is ok\r\n    //in try block call dBank withdraw();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        Do you want to withdraw + take interest?\r\n        <br />\r\n        <br />\r\n        <div>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary\"\r\n            onClick={(e) => {\r\n              this.withdraw(e)\r\n            }}\r\n          >\r\n            Withdraw\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Withdraw\r\n","import React, { Component } from 'react'\r\n\r\nclass AccountDetails extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div>Deposited ETH : {this.props.dAmount}</div>\r\n        <br />\r\n        <br />\r\n        DBC Tokens: {this.props.tokenBalance} DBC\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AccountDetails;\r\n","import React, { Component } from 'react'\r\n\r\nclass BankDetails extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div>Bank Name: {this.props.dBankName}</div>\r\n        <br />\r\n        <div>Bank Address: {this.props.dBankAddress}</div>\r\n        <br />\r\n        <div>Token Name: {this.props.tokenName}</div>\r\n        <br />\r\n        <div>Bank ETH Balance: {this.props.dBankTotalDepositedAmount}</div>\r\n        <br />\r\n        <div>Total DBC Token Supply: {this.props.totalSupply}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BankDetails\r\n","import React, { Component } from 'react'\r\n\r\nclass Borrow extends Component {\r\n  async borrow(amount) {\r\n    if (this.props.dbank !== 'undefined') {\r\n      try {\r\n        await this.props.dbank.methods\r\n          .borrow()\r\n          .send({ value: amount.toString(), from: this.props.account })\r\n      } catch (e) {\r\n        console.log('Error, borrow: ', e)\r\n      }\r\n    }\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let amount = this.borrowAmount.value\r\n    amount = amount * 10 ** 18 //convert to wei\r\n    this.borrow(amount);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br></br>\r\n        Do you want to borrow tokens?\r\n        <br></br>\r\n        (You'll get 50% of collateral, in Tokens)\r\n        <br></br>\r\n        Type collateral amount (in ETH)\r\n        <br></br>\r\n        <br></br>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group mr-sm-2\">\r\n            <input\r\n              id=\"borrowAmount\"\r\n              step=\"0.01\"\r\n              type=\"number\"\r\n              ref={(input) => {\r\n                this.borrowAmount = input\r\n              }}\r\n              className=\"form-control form-control-md\"\r\n              placeholder=\"amount...\"\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            BORROW\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Borrow\r\n","import React, { Component } from 'react'\r\n\r\nclass Payoff extends Component {\r\n  async payOff(e) {\r\n    e.preventDefault();\r\n    if (this.props.dbank !== 'undefined') {\r\n      try {\r\n        const collateralEther = await this.props.dbank.methods\r\n          .collateralEther(this.props.account)\r\n          .call({ from: this.props.account })\r\n        const tokenBorrowed = collateralEther / 2\r\n        await this.props.token.methods\r\n          .approve(this.props.dBankAddress, tokenBorrowed.toString())\r\n          .send({ from: this.props.account })\r\n        await this.props.dbank.methods\r\n          .payOff()\r\n          .send({ from: this.props.account })\r\n      } catch (e) {\r\n        console.log('Error, pay off: ', e)\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <br></br>\r\n          Do you want to payoff the loan?\r\n          <br></br>\r\n          (You'll receive your collateral - fee)\r\n          <br></br>\r\n          <br></br>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-primary\"\r\n            onClick={(e) => this.payOff(e)}\r\n          >\r\n            PAYOFF\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Payoff\r\n","import { Tabs, Tab } from 'react-bootstrap'\nimport dBank from '../abis/dBank.json'\nimport React, { Component } from 'react'\nimport Token from '../abis/Token.json'\nimport './App.css'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport Header from './Header'\nimport Deposit from './Deposit'\nimport Withdraw from './Withdraw'\nimport AccountDetails from './AccountDetails'\nimport BankDetails from './BankDetails'\nimport Borrow from './Borrow'\nimport Payoff from './Payoff'\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadBlockchainData(this.props.dispatch)\n  }\n\n  // connect the app with the blockchain\n  async loadBlockchainData(dispatch) {\n    //check if MetaMask exists\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum)\n      const netId = await web3.eth.net.getId()\n      const accounts = await web3.eth.getAccounts()\n\n      //load balance\n\n      if (typeof accounts[0] !== 'undefined') {\n        const balance = await web3.eth.getBalance(accounts[0])\n        this.setState({\n          account: accounts[0],\n          balance: web3.utils.fromWei(balance),\n          web3: web3,\n        })\n      } else {\n        window.alert('Please login with Metamask.')\n      }\n\n      try {\n        // Token Bank\n        const token = new web3.eth.Contract(\n          Token.abi,\n          Token.networks[netId].address,\n        )\n        const dbank = new web3.eth.Contract(\n          dBank.abi,\n          dBank.networks[netId].address,\n        )\n        const dBankAddress = dBank.networks[netId].address\n        const dBankTotalDepositedAmount = await web3.eth.getBalance(\n          dBankAddress,\n        )\n        const tokenBalance = await token.methods\n          .balanceOf(this.state.account)\n          .call()\n\n        const totalSupply = await token.methods.totalSupply().call()\n\n        this.setState({\n          token: token,\n          dbank: dbank,\n          dBankAddress: dBankAddress,\n          tokenBalance: web3.utils.fromWei(tokenBalance),\n          totalSupply: web3.utils.fromWei(totalSupply),\n          dBankTotalDepositedAmount: web3.utils.fromWei(\n            dBankTotalDepositedAmount,\n          ),\n        })\n      } catch (e) {\n        console.log('Error', e)\n        window.alert('Contracts not deployed to the current network')\n      }\n    } else {\n      window.alert('Please install Metamask')\n    }\n  }\n\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      token: null,\n      tokenName: 'DBC',\n      totalSupply: 0,\n      dbank: null,\n      dBankName: 'Decentralized Bank Currency',\n      balance: 0,\n      dBankAddress: null,\n      dBankTotalDepositedAmount: 0,\n      tokenBalance: 0,\n\n      dAmount: 0,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"text-monospace\">\n        <Navbar />\n        <div className=\"container-fluid mt-5 text-center\">\n          <br />\n          <Header account={this.state.account} />\n          <br></br>\n\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"deposit\" title=\"Deposit\">\n                    <Deposit\n                      dbank={this.state.dbank}\n                      account={this.state.account}\n                    />\n                  </Tab>\n\n                  <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                    <Withdraw\n                      dbank={this.state.dbank}\n                      account={this.state.account}\n                    />\n                  </Tab>\n                  <Tab eventKey=\"accountDetails\" title=\"Account Details\">\n                    <AccountDetails\n                      dAmount={this.state.dAmount}\n                      tokenBalance={this.state.tokenBalance}\n                    />\n                  </Tab>\n\n                  <Tab eventKey=\"bankDetails\" title=\"Bank Details\">\n                    <BankDetails\n                      dBankName={this.state.dBankName}\n                      dBankAddress={this.state.dBankAddress}\n                      tokenName={this.state.tokenName}\n                      dBankTotalDepositedAmount={\n                        this.state.dBankTotalDepositedAmount\n                      }\n                      totalSupply={this.state.totalSupply}\n                    />\n                  </Tab>\n                  <Tab eventKey=\"borrow\" title=\"Borrow Tokens\">\n                    <Borrow\n                      dbank={this.state.dbank}\n                      account={this.state.account}\n                    />\n                  </Tab>\n\n                  <Tab eventKey=\"payOff\" title=\"Payoff\">\n                    <Payoff dbank={this.state.dbank} account={this.state.account} dBankAddress ={this.state.dBankAddress} token = {this.state.token}/>\n                  </Tab>\n\n                </Tabs>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}