{"version":3,"sources":["dbank.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","web3","account","token","tokenName","totalSupply","dbank","dBankName","balance","dBankAddress","dBankTotalDepositedAmount","tokenBalace","dAmount","a","this","loadBlockchainData","dispatch","window","ethereum","Web3","eth","net","getId","netId","getAccounts","accounts","getBalance","setState","utils","fromWei","alert","Contract","Token","abi","networks","address","dBank","methods","balanceOf","call","tokenBalance","console","log","amount","deposit","send","value","toString","from","e","preventDefault","withdraw","className","href","target","rel","src","alt","height","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","type","placeholder","required","ref","input","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15669c36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dbank.adca41d3.png\";","import { Tabs, Tab } from 'react-bootstrap'\nimport dBank from '../abis/dBank.json'\nimport React, { Component } from 'react'\nimport Token from '../abis/Token.json'\nimport dbank from '../dbank.png'\nimport Web3 from 'web3'\nimport './App.css'\n\n//h0m3w0rk - add new tab to check accrued interest\n\nclass App extends Component {\n  \n  \n  async componentWillMount() {\n    await this.loadBlockchainData(this.props.dispatch);\n  }\n\n  // connect the app with the blockchain\n  async loadBlockchainData(dispatch) {\n    //check if MetaMask exists\n    if (typeof window.ethereum !== 'undefined') {\n      const web3 = new Web3(window.ethereum)\n      const netId = await web3.eth.net.getId()\n      const accounts = await web3.eth.getAccounts()\n\n      //load balance\n\n      if (typeof accounts[0] !== 'undefined') {\n        const balance = await web3.eth.getBalance(accounts[0])\n        this.setState({\n          account: accounts[0],\n          balance: web3.utils.fromWei(balance),\n          web3: web3,\n        })\n      } else {\n        window.alert('Please login with Metamask.')\n      }\n\n      try {\n        // Token Bank\n        const token = new web3.eth.Contract(\n          Token.abi,\n          Token.networks[netId].address,\n        )\n        const dbank = new web3.eth.Contract(\n          dBank.abi,\n          dBank.networks[netId].address,\n        )\n        const dBankAddress = dBank.networks[netId].address;\n        const dBankTotalDepositedAmount = await web3.eth.getBalance(dBankAddress);\n        const tokenBalance = await token.methods\n          .balanceOf(this.state.account)\n          .call();\n        \n        // const dAmount = await dBank.methods.etherBalanceOf[this.state.account].call();\n        // this.setState({\n        //   dAmount: web3.utils.fromWei(dAmount.toString())\n        // })\n        const totalSupply = await token.methods.totalSupply().call();\n        \n        this.setState({\n          token: token,\n          dbank: dbank,\n          dBankAddress: dBankAddress,\n          tokenBalace: web3.utils.fromWei(tokenBalance),\n          totalSupply: web3.utils.fromWei(totalSupply),\n          dBankTotalDepositedAmount: web3.utils.fromWei(dBankTotalDepositedAmount)\n        })\n      } catch (e) {\n        console.log('Error', e)\n        window.alert('Contracts not deployed to the current network')\n      }\n    } else {\n      window.alert('Please install Metamask')\n    }\n\n    //assign to values to variables: web3, netId, accounts\n\n    //check if account is detected, then load balance&setStates, elsepush alert\n\n    //in try block load contracts\n\n    //if MetaMask not exists push alert\n  }\n\n  async deposit(amount) {\n    const web3 = new Web3(window.ethereum);\n    if (this.state.dbank !== 'undefined') {\n      try {\n        await this.state.dbank.methods\n          .deposit()\n          .send({ value: amount.toString(), from: this.state.account });\n        \n        \n        // const dAmount = dbank.etherBalanceOf().call();\n        this.setState({\n          dAmount: web3.utils.fromWei(amount.toString())\n        })\n      } catch (e) {\n        console.log('Error, deposit: ', e)\n      }\n    }\n  }\n\n  async withdraw(e) {\n    e.preventDefault()\n    if (this.state.dbank !== 'undefined') {\n      try {\n        await this.state.dbank.methods\n          .withdraw()\n          .send({ from: this.state.account })\n      } catch (e) {\n        console.log('Error, withdraw: ', e)\n      }\n    }\n    //prevent button from default click\n    //check if this.state.dbank is ok\n    //in try block call dBank withdraw();\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      token: null,\n      tokenName: 'DBC',\n      totalSupply: 0,\n      dbank: null,\n      dBankName: 'Decentralized Bank Currency',\n      balance: 0,\n      dBankAddress: null,\n      dBankTotalDepositedAmount: 0,\n      tokenBalace: 0,\n      \n      dAmount: 0\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"text-monospace\">\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"#\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={dbank} className=\"App-logo\" alt=\"logo\" height=\"32\" />\n            <b>dBank</b>\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5 text-center\">\n          <br></br>\n          <h1>Welocome to the Decentralized Bank</h1>\n          <h2>{this.state.account}</h2>\n          <br></br>\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"deposit\" title=\"Deposit\">\n                    <div>\n                      <br />\n                      How much you want to deposit?\n                      <br />\n                      (min. amount is 0.01 ETH)\n                      <br />\n                      (1 deposit is possible at a time)\n                      <br />\n                      <form\n                        onSubmit={(e) => {\n                          e.preventDefault();\n                          \n                          let amount = this.depositAmount.value;\n                          \n                          amount = amount * 10 ** 18 //convert to Wei\n                          this.deposit(amount)\n                          \n                        }}\n                      >\n                        <div className=\"form-group mr-sm-2\">\n                          <br />\n                          <input\n                            id=\"depositAmount\"\n                            step=\"0.01\"\n                            type=\"number\"\n                            className=\"form-control form-control-md\"\n                            placeholder=\"amount...\"\n                            required\n                            ref={(input) => {\n                              this.depositAmount = input\n                            }}\n                          />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                          Deposit\n                        </button>\n                      </form>\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                    <br />\n                    Do you want to withdraw + take interest?\n                    <br />\n                    <br />\n                    <div>\n                      <button\n                        type=\"submit\"\n                        className=\"btn btn-primary\"\n                        onClick={(e) => {\n                          this.withdraw(e)\n                        }}\n                      >\n                        Withdraw\n                      </button>\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"accountDetails\" title=\"Account Details\">\n                    <br />\n                    <div>Deposited ETH : {this.state.dAmount}</div>\n                    <br />\n                    <br />\n                    DBC Tokens: {this.state.tokenBalace} DBC\n                  </Tab>\n\n                  <Tab eventKey=\"bankDetails\" title=\"Bank Details\">\n                    <br />\n                    <div>Bank Name: {this.state.dBankName}</div>\n                    <br/>\n                    <div>Bank Address: {this.state.dBankAddress}</div>\n                    <br />\n                    <div>Token Name: {this.state.tokenName}</div>\n                    <br />\n                    <div>Bank ETH Balance: {this.state.dBankTotalDepositedAmount}</div>\n                    <br/>\n                    <div>Total DBC Token Supply: {this.state.totalSupply}</div>\n                  </Tab>\n                </Tabs>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}